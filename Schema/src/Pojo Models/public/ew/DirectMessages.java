package ew;
// Generated 10 Jun, 2016 12:07:08 PM by Hibernate Tools 4.0.0.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * DirectMessages generated by hbm2java
 */
@Entity
@Table(name = "direct_messages", schema = "public")
public class DirectMessages implements java.io.Serializable {

	private int id;
	private Users usersByUserId;
	private Users usersByToUserId;
	private Projects projects;
	private String fromEmail;
	private String fromName;
	private String content;
	private Date createdAt;
	private Date updatedAt;
	private Set<DirectMessageNotifications> directMessageNotificationses = new HashSet<DirectMessageNotifications>(0);

	public DirectMessages() {
	}

	public DirectMessages(int id, Users usersByToUserId, String fromEmail, String content) {
		this.id = id;
		this.usersByToUserId = usersByToUserId;
		this.fromEmail = fromEmail;
		this.content = content;
	}

	public DirectMessages(int id, Users usersByUserId, Users usersByToUserId, Projects projects, String fromEmail,
			String fromName, String content, Date createdAt, Date updatedAt,
			Set<DirectMessageNotifications> directMessageNotificationses) {
		this.id = id;
		this.usersByUserId = usersByUserId;
		this.usersByToUserId = usersByToUserId;
		this.projects = projects;
		this.fromEmail = fromEmail;
		this.fromName = fromName;
		this.content = content;
		this.createdAt = createdAt;
		this.updatedAt = updatedAt;
		this.directMessageNotificationses = directMessageNotificationses;
	}

	@Id

	@Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_id")
	public Users getUsersByUserId() {
		return this.usersByUserId;
	}

	public void setUsersByUserId(Users usersByUserId) {
		this.usersByUserId = usersByUserId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "to_user_id", nullable = false)
	public Users getUsersByToUserId() {
		return this.usersByToUserId;
	}

	public void setUsersByToUserId(Users usersByToUserId) {
		this.usersByToUserId = usersByToUserId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "project_id")
	public Projects getProjects() {
		return this.projects;
	}

	public void setProjects(Projects projects) {
		this.projects = projects;
	}

	@Column(name = "from_email", nullable = false)
	public String getFromEmail() {
		return this.fromEmail;
	}

	public void setFromEmail(String fromEmail) {
		this.fromEmail = fromEmail;
	}

	@Column(name = "from_name")
	public String getFromName() {
		return this.fromName;
	}

	public void setFromName(String fromName) {
		this.fromName = fromName;
	}

	@Column(name = "content", nullable = false)
	public String getContent() {
		return this.content;
	}

	public void setContent(String content) {
		this.content = content;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_at", length = 29)
	public Date getCreatedAt() {
		return this.createdAt;
	}

	public void setCreatedAt(Date createdAt) {
		this.createdAt = createdAt;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated_at", length = 29)
	public Date getUpdatedAt() {
		return this.updatedAt;
	}

	public void setUpdatedAt(Date updatedAt) {
		this.updatedAt = updatedAt;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "directMessages")
	public Set<DirectMessageNotifications> getDirectMessageNotificationses() {
		return this.directMessageNotificationses;
	}

	public void setDirectMessageNotificationses(Set<DirectMessageNotifications> directMessageNotificationses) {
		this.directMessageNotificationses = directMessageNotificationses;
	}

}
